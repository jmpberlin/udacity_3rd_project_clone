version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end tests
          command: |
            cd frontend
            npm install 
            npm run test

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend tests
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run npm audits on frontend
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run npm audits on backend
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
  #   deploy-infrastructure:
  #     docker:
  #       # Docker image here that supports AWS CLI
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Ensure back-end infrastructure exists
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file .circleci/files/backend.yml \
  #               #--tags project=your-tag \
  #               # --stack-name "your back-end stack name with workflow id" \
  #               # --parameter-overrides ID="your workflow id"
  #               exit 1
  #       - run:
  #           name: Ensure front-end infrastructure exist
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file .circleci/files/frontend.yml \
  #               #--tags project=your-tag \
  #               # --stack-name "your front-end stack name with workflow id" \
  #               # --parameter-overrides ID="your workflow id"
  #               exit 1
  #       - run:
  #           name: Add back-end ip to ansible inventory
  #           command: |
  #             # Your code here
  #             exit 1
  #       - persist_to_workspace:
  #           root: ~/
  #           paths:
  #             - project/.circleci/ansible/inventory.txt
  #       # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '15:19:28:b3:5c:f0:5d:8f:3d:0f:a3:d0:35:bb:68:2b'
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -vv -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  #       # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/MfuFTtcrnEYNxTz4nHT51E/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  deploy-frontend:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            sudo npm install -g tar
      - run:
          name: install gzip
          command: |
            sudo npm install -g gzip

      - run:
          name: install python
          command: |
            sudo npm install -g python
      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-eb6a559 --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '15:19:28:b3:5c:f0:5d:8f:3d:0f:a3:d0:35:bb:68:2b'
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            pip install awscli
            apk add --update nodejs npm ansible zip
      - run:
          name: Deploy backend
          command: |
            cd backend
            apk add --update nodejs-npm
            apk add --update npm
            npm install
            npm run build
            echo build successful
      - run:
          name: Add env vars
          command: |
            echo ENVIRONMENT=production > "backend/dist/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/dist/.env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> "backend/dist/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/dist/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/dist/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist/.env"
      - run:
          name: build backend
          command: |
            mkdir artifacts
            tar -C backend -czvf artifact.tar.gz .
            mv ~/project/artifact.tar.gz ~/project/artifacts
      - store_artifacts:
          path: ~/project/artifacts
      - run:
          name: run the playbook
          command: ansible-playbook -vv -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      ##### ADDED A TEMPORARY INVENTORY FILE FOR TESTING _ REMOVE THE INVENTORY FILE LATER! #######

  smoke-test:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            echo ${FRONTEND_URL}
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [build-backend]
      # - deploy-frontend
      #     requires: [run-migrations]
      # - deploy-backend
      #     requires: [run-migrations]
      - smoke-test
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
